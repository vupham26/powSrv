package main

import (
	"fmt"
	"log"
	"math/rand"
	"time"

	"github.com/iotaledger/giota"
	"github.com/muxxer/powsrv"
)

const (
	TRYTE_CHARS   = "9ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	ParallelLevel = 4
	SpamCount     = 1000
)

func main() {
	ts := time.Now()
	var attachedCount uint32

	channelPow := make(chan giota.Trytes, ParallelLevel) // Channel PowJobs
	for worker := 0; worker < ParallelLevel; worker++ {
		powClient := &powsrv.PowClient{Network: "tcp", Address: fmt.Sprintf("192.168.1.59:%v", 14300+worker), WriteTimeOutMs: 500, ReadTimeOutMs: 5000}
		powClient.Init()
		powFunc := powClient.PowFunc
		go func(id int, mwm int, channel chan giota.Trytes) {
			for {
				trytes, more := <-channel
				if !more {
					break
				}

				result, err := powFunc(trytes, mwm)
				if err != nil {
					log.Printf("[%d] Error: %s\n", id, err.Error())
					continue
				}
				attachedCount++
				avgTps := float32(attachedCount) / float32(time.Since(ts)/time.Second)
				log.Printf("[%d] Nonce-Trytes: %s, [%d/%d] attached! avg TPS: %0.2f\n", id, result, attachedCount, SpamCount, avgTps)
			}
		}(worker, 14, channelPow)
	}

	// test transaction data
	var tx

	var rndTag = make([]rune, 128)
	for i := 0; i < SpamCount; i++ {
		for j := 0; j < 128; j++ {
			rndTag[j] = rune(TRYTE_CHARS[rand.Intn(len(TRYTE_CHARS))])
		}
		channelPow <- giota.Trytes(string(rndTag[0:128]) + tx[128:])
		fmt.Printf("%d\n", i)
	}
	close(channelPow)
}
